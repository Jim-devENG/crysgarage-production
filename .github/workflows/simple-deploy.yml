name: Simple Deploy to VPS

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install essential tools
      run: |
        # Update package lists
        sudo apt-get update || echo "apt-get update failed, continuing..."
        
        # Install essential packages
        sudo apt-get install -y bash coreutils openssh-client git curl || echo "Package installation failed, continuing..."
        
        # Verify bash is available
        which bash || echo "bash not found in PATH"
        /bin/bash --version || echo "bash version check failed"
        
        # Verify coreutils
        which ls || echo "ls not found in PATH"
        /bin/ls --version || echo "ls version check failed"
        
        echo "Essential tools installation completed"

    - name: Start SSH agent
      run: |
        eval "$(ssh-agent -s)"
        echo "SSH agent started"
      shell: bash

    - name: Add SSH key
      run: |
        echo "Adding SSH key to agent..."
        ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
        echo "SSH key added to agent"
      shell: bash

    - name: Setup known_hosts
      run: |
        mkdir -p ~/.ssh
        echo "Adding VPS to known hosts..."
        ssh-keyscan -H 209.74.80.162 >> ~/.ssh/known_hosts
        echo "Known hosts setup completed"
      shell: bash

    - name: Test SSH connection
      run: |
        echo "Testing SSH connection..."
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@209.74.80.162 "echo 'SSH connection test successful'"
        echo "SSH connection test completed"
      shell: bash
    
    - name: Deploy to VPS
      run: |
        echo "üöÄ Starting deployment to current VPS setup..."
        ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@209.74.80.162 << 'EOF'
          # Set proper PATH
          export PATH="/usr/local/ruby-3.1.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          
          set -e  # Exit on any error
          
          # Navigate to deployment directory
          cd /var/www/crysgarage-deploy
          echo "üìÅ Current directory: $(pwd)"
          
          # Pull latest changes
          echo "üì• Pulling latest changes..."
          git pull origin master
          
          # Build frontend
          echo "üåê Building frontend..."
          cd crysgarage-frontend
          export VITE_PYTHON_SERVICE_URL="https://crysgarage.studio/api/python"
          npm ci
          npm run build
          
          # Frontend is already built in dist/ and will be served by Nginx
          # from /var/www/crysgarage-deploy/crysgarage-frontend/dist/
          echo "‚úÖ Frontend built successfully - served from current directory"
          
          # Set proper permissions for frontend
          chown -R nginx:nginx /var/www/crysgarage-deploy/crysgarage-frontend/dist
          chmod -R 755 /var/www/crysgarage-deploy/crysgarage-frontend/dist
          
          # Deploy backend essentials
          echo "üîß Deploying backend..."
          cd ../crysgarage-backend-fresh
          # Backend is already in place, just ensure permissions
          chown -R nginx:nginx /var/www/crysgarage-deploy/crysgarage-backend-fresh
          chmod -R 755 /var/www/crysgarage-deploy/crysgarage-backend-fresh
          
          # Restart services
          echo "üîÑ Restarting services..."
          systemctl restart php-fpm || (echo "php-fpm restart failed" && systemctl status php-fpm | cat && exit 1)
          if ! nginx -t; then
            echo "nginx config test failed";
            nginx -t 2>&1 | tail -n 50;
            exit 1;
          fi
          if ! nginx -s reload; then
            echo "nginx reload failed - showing status and logs";
            systemctl status nginx --no-pager | cat || true;
            journalctl -u nginx --no-pager -n 100 | cat || true;
            exit 1;
          fi
          
          # Health check
          echo "üè• Running health check..."
          sleep 5
          curl -f https://crysgarage.studio || echo "Main site health check failed but deployment completed"
          
          echo "‚úÖ Deployment completed at $(date)"
          echo "üåê Website should now be accessible at https://crysgarage.studio"
        EOF
      shell: bash
